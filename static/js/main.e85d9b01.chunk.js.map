{"version":3,"sources":["MovieList.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","_ref","_ref$onAddMovie","onAddMovie","react_default","a","createElement","style","cursor","fontSize","textAlign","background","padding","margin","border","width","height","className","onClick","id","Math","random","img","prompt","title","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveSearch","e","setState","search","target","value","state","movies","newMovie","concat","_this2","onChange","type","placeholder","filter","item","toUpperCase","includes","map","el","display","key","src","src_MovieList","addNewMovie","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,SAhBG,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,kBAAH,IAAAD,EAAgB,aAAhBA,EAAA,OAEVE,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,UAAUC,SAAS,GAAIC,UAAU,SAASC,WAAW,QAAQC,QAAQ,OAAOC,OAAO,GAAGC,OAAO,kBAAmBC,MAAO,QAAQC,OAAO,SACtJC,UAAU,iBACVC,QAAS,WACLf,EAAW,CACXgB,GAAGC,KAAKC,SACRC,IAAIC,OAAO,iBACXC,MAAOD,OAAO,qBANtB,OC8EOE,cA5Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsCRQ,WAAa,SAACC,GACZR,EAAKS,SAAS,CACZC,OAAQF,EAAEG,OAAOC,SArCnBZ,EAAKa,MAAS,CACZC,OAAQ,CACN,CACEtB,GAAI,EACJG,IAAK,kEACLE,MAAO,0BAET,CACEL,GAAI,EACJG,IAAK,kEACLE,MAAO,kBAET,CACEL,GAAI,EACJG,IAAK,sHACLE,MAAO,eAET,CACEL,GAAI,EACJG,IAAK,2GACLE,MAAO,iBAET,CACEL,GAAI,EACJG,IAAK,uKACLE,MAAO,8BAGXa,OAAQ,IAhCOV,2EA4CPe,GACVZ,KAAKM,SAAS,CACZK,OAAQX,KAAKU,MAAMC,OAAOE,OAAOD,sCAI5B,IAAAE,EAAAd,KACP,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOW,UAAU,OAAO4B,SAAUf,KAAKI,WAAYY,KAAK,OAAOC,YAAY,eAC3E3C,EAAAC,EAAAC,cAAA,OAAKW,UAAU,SAEZa,KAAKU,MAAMC,OAAOO,OAAO,SAAAC,GAAI,OAAIA,EAAKzB,MAAM0B,cAAcC,SAASP,EAAKJ,MAAMH,OAAOa,iBAAgBE,IAAI,SAAAC,GACxG,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEI,WAAY,QAASC,QAAS,OAAQC,OAAQ,GAAIC,OAAQ,kBAAmBwC,QAAS,OAAQvC,MAAO,SAAWwC,IAAKF,EAAGlC,IACpIf,EAAAC,EAAAC,cAAA,OAAKkD,IAAKH,EAAG/B,IAAKf,MAAO,CAAEQ,MAAO,OAClCX,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEE,SAAU,KAAO4C,EAAG7B,UAKtCpB,EAAAC,EAAAC,cAAA,QAAMW,UAAU,kBACdb,EAAAC,EAAAC,cAACmD,EAAD,CACEtD,WAAY,SAACuC,GAAD,OAAcE,EAAKc,YAAYhB,gBArEvCiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e85d9b01.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst MovieList = ({ onAddMovie = () => {}}) => (\r\n    \r\n        <div style={{cursor:'pointer',fontSize:60, textAlign:\"center\",background:\"green\",padding:'10px',margin:10,border:\"2px black solid\", width: \"500px\",height:\"100px\"}}\r\n            className=\"new-movie-card\"\r\n            onClick={() => {\r\n                onAddMovie({\r\n                id:Math.random(),\r\n                img:prompt('movie image: '),\r\n                title: prompt('movie title: '),\r\n               \r\n            })}} >\r\n            +\r\n        </div>\r\n     \r\n)\r\n\r\nexport default MovieList","import React, { Component } from 'react';\nimport './App.css';\nimport MovieList from './MovieList'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n\n    this.state = ({\n      movies: [\n        {\n          id: 0,\n          img: \"https://image.tmdb.org/t/p/w185/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\",\n          title: \"Avengers: Infinity War\"\n        },\n        {\n          id: 1,\n          img: \"https://image.tmdb.org/t/p/w185/cezWGskPY5x7GaglTTRN4Fugfb8.jpg\",\n          title: \"\tThe Avengers\"\n        },\n        {\n          id: 3,\n          img: \"https://cps-static.rovicorp.com/2/Open/Disney_1040/Program/25738083/_derived_jpg_q90_480x340_m0/Toy-Story-4_2x3.jpg\",\n          title: \"Toy Story 4\"\n        },\n        {\n          id: 4,\n          img: \"https://cps-static.rovicorp.com/2/Open/TMDB4_2462/Program/32770134/_derived_jpg_q90_480x340_m0/lionv.jpg\",\n          title: \"The Lion King\"\n        },\n        {\n          id: 5,\n          img: \"https://cps-static.rovicorp.com/2/Open/Sony_Pictures_Television_369/Program/31768332/_derived_jpg_q90_480x340_m0/31768332_Spider-Man%20Far%20From%20Home_PosterT.jpg\",\n          title: \"Spider-Man: Far From Home\"\n        }\n      ],\n      search: '',\n    })\n\n  }\n\n\n\n  saveSearch = (e) => {\n    this.setState({\n      search: e.target.value\n    })\n  }\n  addNewMovie(newMovie) {\n    this.setState({\n      movies: this.state.movies.concat(newMovie)\n    })\n  }\n\n  render() {\n    return (\n      <div >\n        <input className=\"name\" onChange={this.saveSearch} type=\"text\" placeholder=\"Movie name\" />\n        <div className=\"movie\">\n          \n          {this.state.movies.filter(item => item.title.toUpperCase().includes(this.state.search.toUpperCase())).map(el => {\n            return (\n              <div style={{ background: \"green\", padding: '10px', margin: 10, border: \"2px black solid\", display: \"flex\", width: \"500px\" }} key={el.id}>\n                <img src={el.img} style={{ width: 200 }} />\n                <p style={{ fontSize: 30 }}>{el.title}</p>\n              </div>\n            )\n          })}\n\n          <main className=\"movie-app-main\">\n            <MovieList\n              onAddMovie={(newMovie) => this.addNewMovie(newMovie)} />\n          </main>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}